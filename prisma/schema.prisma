datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ... (rest of enums)

enum Role {
  CITIZEN
  ADMIN
  SUPER_ADMIN
}

enum ServiceCategory {
  licensing
  permits
  certificates
  registration
  tax
  social
  legal
  other
}

enum Gender {
  M
  F
  Other
  Prefer_not_to_say @map("Prefer not to say")
}

enum ReportType {
  application
  certificate
  permit
  license
  receipt
  status_update
  other
}

enum AppointmentStatus {
  scheduled
  confirmed
  in_progress
  completed
  cancelled
  no_show
  rescheduled
}

enum AppointmentType {
  new_application
  document_collection
  consultation
  followup
  renewal
}

enum PriorityLevel {
  normal
  urgent
  emergency
}

enum ChatMessageType {
  citizen
  agent
  system
  bot
}

enum LoginAccessMethod {
  web
  mobile_app
  api
  kiosk
}

enum LoginMethod {
  password
  otp
  oauth
  biometric
  digital_id
}

enum OtpType {
  login
  password_reset
  email_verification
  phone_verification
  transaction_auth
}

enum OtpDeliveryMethod {
  email
  sms
  app_notification
  voice_call
}


// --------------------------------------------------
// MODELS
// --------------------------------------------------

model DimDepartments {
  departmentId      String                 @id @map("department_id") @db.VarChar(25)
  departmentName    String?                @map("department_name") @db.VarChar(100)
  description       String?                @db.Text
  headOfficeAddress Json?                  @map("head_office_address")
  contactInfo       Json?                  @map("contact_info")
  operatingHours    Json?                  @map("operating_hours")
  isActive          Boolean?               @default(true) @map("is_active")
  createdAt         DateTime?              @default(now()) @map("created_at") @db.Timestamp(3)
  services          DimDepartmentService[]
  appointments      FactAppointments[]

  @@map("DIM_departments")
  @@index([isActive], map: "idx_active")
}

model DimServices {
  serviceId           String                 @id @map("service_id") @db.VarChar(25)
  serviceName         String?                @map("service_name") @db.VarChar(100)
  description         String?                @db.Text
  serviceCategory     ServiceCategory?       @default(other) @map("service_category")
  processingTimeDays  Int?                   @map("processing_time_days") @db.SmallInt
  feeAmount           Decimal?               @default(0.00) @map("fee_amount") @db.Decimal(10, 2)
  requiredDocuments   Json?                  @map("required_documents")
  eligibilityCriteria String?                @map("eligibility_criteria") @db.Text
  onlineAvailable     Boolean?               @default(true) @map("online_available")
  appointmentRequired Boolean?               @default(false) @map("appointment_required")
  isActive            Boolean?               @default(true) @map("is_active")
  maxCapacityPerSlot  Int?                   @default(6) @map("max_capacity_per_slot")
  createdAt           DateTime?              @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt           DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  departments         DimDepartmentService[]
  appointments        FactAppointments[]
  assignedAdmins      AdminServiceAssignment[]
  operationalHours    Json?                  @map("operational_hours") // New field

  @@map("DIM_services")
  @@index([serviceCategory, isActive], map: "idx_category_active")
  @@index([onlineAvailable, appointmentRequired], map: "idx_online_appointment")
  @@index([feeAmount], map: "idx_fee_range")
}

model DimDepartmentService {
  departmentId String         @map("department_id") @db.VarChar(25)
  serviceId    String         @map("service_id") @db.VarChar(25)
  department   DimDepartments @relation(fields: [departmentId], references: [departmentId], onDelete: Cascade, onUpdate: Cascade, map: "fk_deptservice_dept")
  service      DimServices    @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade, onUpdate: Cascade, map: "fk_deptservice_service")

  @@id([departmentId, serviceId])
  @@map("DIM_departmentservice")
  @@index([serviceId, departmentId], map: "idx_service_dept")
  @@index([departmentId], map: "idx_primary_services")
}

model DimUsers {
  userId            String             @id @map("user_id") @db.VarChar(25)
  username          String?            @db.VarChar(50)
  passwordHash      String?            @map("password_hash") @db.VarChar(255)
  email             String?            @unique(map: "uk_email") @db.VarChar(100)
  firstName         String?            @map("first_name") @db.VarChar(50)
  lastName          String?            @map("last_name") @db.VarChar(50)
  phone             String?            @db.VarChar(20)
  nationalId        String?            @unique(map: "uk_national_id") @map("national_id") @db.VarChar(20)
  dateOfBirth       DateTime?          @map("date_of_birth") @db.Date
  gender            Gender?
  address           Json?
  preferredLanguage String?            @default("EN") @map("preferred_language") @db.VarChar(2)
  isVerified        Boolean?           @default(false) @map("is_verified")
  isActive          Boolean?           @default(true) @map("is_active")
  createdAt         DateTime?          @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt         DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  role              Role               @default(CITIZEN)
  assignedServices  AdminServiceAssignment[]
  reportsCreated    DimReports[]
  appointments      FactAppointments[]
  chatLogs          FactChatLogs[]
  logins            FactLogins[]
  otps              FactOtp[]

  @@map("DIM_users")
  @@index([email, isActive], map: "idx_email_active")
  @@index([isVerified, isActive], map: "idx_verification_status")
  @@index([createdAt], map: "idx_created_at")
}

model AdminServiceAssignment {
  admin      DimUsers    @relation(fields: [adminId], references: [userId], onDelete: Cascade)
  adminId    String      @map("admin_id") @db.VarChar(25)
  service    DimServices @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  serviceId  String      @map("service_id") @db.VarChar(25)
  assignedAt DateTime    @default(now())

  @@id([adminId, serviceId])
  @@map("admin_service_assignments")
}


model DimReports {
  reportId         String             @id @map("report_id") @db.VarChar(25)
  reportTitle      String?            @map("report_title") @db.VarChar(200)
  reportContent    String?            @map("report_content") @db.Text
  reportType       ReportType?        @default(other) @map("report_type")
  documentNumber   String?            @unique(map: "document_number_UNIQUE") @map("document_number") @db.VarChar(50)
  filePath         String?            @map("file_path") @db.VarChar(500)
  fileType         String?            @map("file_type") @db.VarChar(10)
  digitalSignature String?            @map("digital_signature") @db.Text
  createdBy        String?            @map("created_by") @db.VarChar(25)
  createdAt        DateTime?          @default(now()) @map("created_at") @db.Timestamp(3)
  expiresAt        DateTime?          @map("expires_at") @db.Timestamp(3)
  creator          DimUsers?          @relation(fields: [createdBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "fk_reports_created_by")
  appointments     FactAppointments[]

  @@map("DIM_reports")
  @@index([reportType, createdAt], map: "idx_type_created")
  @@index([expiresAt], map: "idx_expiration")
  @@index([createdBy], map: "idx_created_by")
}

model FactAppointments {
  appointmentId     String           @id @map("appointment_id") @db.VarChar(25)
  userId            String           @map("user_id") @db.VarChar(25)
  departmentId      String           @map("department_id") @db.VarChar(25)
  serviceId         String           @map("service_id") @db.VarChar(25)
  reportId          String?          @map("report_id") @db.VarChar(25)
  appointmentDate   DateTime?        @map("appointment_date") @db.Date
  appointmentTime   DateTime?        @map("appointment_time") @db.Time(3)
  status            AppointmentStatus? @default(scheduled)
  appointmentType   AppointmentType? @default(new_application) @map("appointment_type")
  priorityLevel     PriorityLevel?   @default(normal) @map("priority_level")
  queueNumber       String?          @map("queue_number") @db.VarChar(20)
  estimatedDuration Int?             @default(30) @map("estimated_duration") @db.SmallInt
  notes             String?          @db.Text
  createdAt         DateTime?        @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt         DateTime?        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  department        DimDepartments   @relation(fields: [departmentId], references: [departmentId], onDelete: Restrict, onUpdate: Cascade, map: "fk_appointments_department")
  report            DimReports?      @relation(fields: [reportId], references: [reportId], onDelete: SetNull, onUpdate: Cascade, map: "fk_appointments_report")
  service           DimServices      @relation(fields: [serviceId], references: [serviceId], onDelete: Restrict, onUpdate: Cascade, map: "fk_appointments_service")
  user              DimUsers         @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "fk_appointments_user")
  submittedDocuments SubmittedDocument[]

  @@map("FACT_appointments")
  @@index([userId, appointmentDate], map: "idx_user_date")
  @@index([departmentId, appointmentDate, appointmentTime], map: "idx_dept_date_time")
  @@index([serviceId, appointmentDate], map: "idx_service_date")
  @@index([status, appointmentDate], map: "idx_status_date")
  @@index([appointmentType, appointmentDate], map: "idx_appointment_type")
  @@index([departmentId, appointmentDate, queueNumber], map: "idx_queue_management")
  @@index([reportId], map: "fk_appointments_report_idx")
  feedback          Feedback?
}

model Feedback {
  id              String           @id @default(cuid())
  rating          Int
  remarks         String?
  appointment     FactAppointments @relation(fields: [appointmentId], references: [appointmentId])
  appointmentId   String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("feedback")
}

model SubmittedDocument {
  documentId         String           @id @default(cuid()) @db.Text
  appointmentId      String           @db.VarChar(25)
  appointment        FactAppointments @relation(fields: [appointmentId], references: [appointmentId])
  externalDocumentId String           @unique
  filePath           String
  mimeType           String
  originalFilename   String
  fileSizeBytes      Int
  isApproved         Boolean?         @default(false)
  remarks            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@map("SUBMITTED_documents")
}

model FactChatLogs {
  logId              BigInt           @id @default(autoincrement()) @map("log_id") @db.BigInt
  userId             String           @map("user_id") @db.VarChar(25)
  sessionId          String?          @map("session_id") @db.VarChar(36)
  messageType        ChatMessageType? @default(citizen) @map("message_type")
  message            String?          @db.Text
  isResolved         Boolean?         @default(false) @map("is_resolved")
  satisfactionRating Int?             @map("satisfaction_rating") @db.SmallInt
  timestamp          DateTime?        @default(now()) @db.Timestamp(3)
  ipAddress          String?          @map("ip_address") @db.VarChar(45)
  user               DimUsers         @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "fk_chat_logs_user")

  @@map("FACT_chat_logs")
  @@index([userId, timestamp], map: "idx_user_timestamp")
  @@index([sessionId, timestamp], map: "idx_session_timestamp")
  @@index([isResolved, timestamp], map: "idx_resolution_status")
}

model FactLogins {
  loginId         BigInt             @id @default(autoincrement()) @map("login_id") @db.BigInt
  userId          String             @map("user_id") @db.VarChar(25)
  loginTimestamp  DateTime           @default(now()) @map("login_timestamp") @db.Timestamp(3)
  logoutTimestamp DateTime?          @map("logout_timestamp") @db.Timestamp(3)
  ipAddress       String?            @map("ip_address") @db.VarChar(45)
  userAgent       String?            @map("user_agent") @db.VarChar(500)
  locationCity    String?            @map("location_city") @db.VarChar(100)
  locationCountry String?            @map("location_country") @db.VarChar(2)
  accessMethod    LoginAccessMethod? @default(web) @map("access_method")
  loginMethod     LoginMethod?       @default(password) @map("login_method")
  success         Boolean?           @default(true)
  failureReason   String?            @map("failure_reason") @db.VarChar(100)
  sessionDuration Int?
  user            DimUsers           @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "fk_logins_user")

  @@map("FACT_logins")
  @@index([userId, loginTimestamp], map: "idx_user_login_time")
  @@index([loginTimestamp], map: "idx_timestamp")
  @@index([success, loginTimestamp], map: "idx_success_timestamp")
  @@index([accessMethod, loginTimestamp], map: "idx_access_method")
}

model FactOtp {
  otpId          BigInt             @id @default(autoincrement()) @map("otp_id") @db.BigInt
  userId         String             @map("user_id") @db.VarChar(25)
  otpCode        String?            @map("otp_code") @db.VarChar(6)
  otpType        OtpType?           @default(login) @map("otp_type")
  deliveryMethod OtpDeliveryMethod? @default(email) @map("delivery_method")
  createdAt      DateTime?          @default(now()) @map("created_at") @db.Timestamp(3)
  expiresAt      DateTime?          @map("expires_at") @db.Timestamp(3)
  usedAt         DateTime?          @map("used_at") @db.Timestamp(3)
  attempts       Int?               @default(0) @db.SmallInt
  maxAttempts    Int?               @default(3) @map("max_attempts") @db.SmallInt
  isActive       Boolean?           @default(true) @map("is_active")
  user           DimUsers           @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "fk_otp_user")

  @@map("FACT_otp")
  @@index([userId, otpType, isActive], map: "idx_user_type_active")
  @@index([expiresAt, isActive], map: "idx_expires_cleanup")
  @@index([userId, otpCode, otpType, isActive], map: "idx_verification_lookup")
}
